{"ast":null,"code":"const express = require(\"express\");\n\nconst router = express.Router();\n\nconst {\n  Product\n} = require(\"../models/Product\");\n\nconst multer = require(\"multer\");\n\nconst {\n  auth\n} = require(\"../middleware/auth\");\n\nconst aws = require(\"aws-sdk\");\n\nconst multerS3 = require(\"multer-s3\");\n\nconst path = require(\"path\");\n\nconst {\n  accessKeyId,\n  secretAccessKey,\n  Bucket\n} = require(\"../config/key\");\n\nconst s3 = new aws.S3({\n  accessKeyId: accessKeyId,\n  secretAccessKey: secretAccessKey,\n  Bucket: Bucket\n});\nconst ImageUpload = multer({\n  storage: multerS3({\n    s3: s3,\n    bucket: Bucket,\n    acl: \"public-read\",\n    key: function (req, file, cb) {\n      cb(null, `${Date.now()}_${file.originalname}`);\n    }\n  }),\n  fileFilter: function (req, file, cb) {\n    checkFileType(file, cb);\n  }\n}).single(\"file\");\n\nfunction checkFileType(file, cb) {\n  // Allowed ext\n  const filetypes = /jpeg|jpg|png/; // Check ext\n\n  const extname = filetypes.test(path.extname(file.originalname).toLowerCase()); // Check mime\n\n  const mimetype = filetypes.test(file.mimetype);\n\n  if (mimetype && extname) {\n    return cb(null, true);\n  } else {\n    cb(\"Images Only!\");\n  }\n} //=================================\n//             Product\n//=================================\n\n\nrouter.post(\"/uploadImage\", auth, (req, res) => {\n  ImageUpload(req, res, err => {\n    if (err) {\n      return res.json({\n        success: false,\n        err\n      });\n    } else if (err instanceof multer.MulterError) {\n      return res.json({\n        success: false,\n        err\n      });\n    } else {\n      return res.json({\n        success: true,\n        image: req.file.location,\n        fileName: req.file.filename\n      });\n    }\n  });\n});\nrouter.post(\"/uploadProduct\", auth, (req, res) => {\n  const product = new Product(req.body);\n  product.save(err => {\n    if (err) return res.status(400).json({\n      success: false,\n      err\n    });\n    return res.status(200).json({\n      success: true\n    });\n  });\n});\nrouter.post(\"/getProducts\", (req, res) => {\n  let order = req.body.order ? req.body.order : \"desc\";\n  let sortBy = req.body.sortBy ? req.body.sortBy : \"_id\";\n  let limit = req.body.limit ? parseInt(req.body.limit) : 100;\n  let skip = parseInt(req.body.skip);\n  let findArgs = {};\n  let term = req.body.searchTerm;\n\n  for (let key in req.body.filters) {\n    if (req.body.filters[key].length > 0) {\n      if (key === \"price\") {\n        findArgs[key] = {\n          $gte: req.body.filters[key][0],\n          $lte: req.body.filters[key][1]\n        };\n      } else {\n        findArgs[key] = req.body.filters[key];\n      }\n    }\n  }\n\n  if (term) {\n    Product.find(findArgs).find({\n      $text: {\n        $search: term\n      }\n    }).populate(\"writer\").sort([[sortBy, order]]).skip(skip).limit(limit).exec((err, products) => {\n      if (err) return res.status(400).json({\n        success: false,\n        err\n      });\n      res.status(200).json({\n        success: true,\n        products,\n        postSize: products.length\n      });\n    });\n  } else {\n    Product.find(findArgs).populate(\"writer\").sort([[sortBy, order]]).skip(skip).limit(limit).exec((err, products) => {\n      if (err) return res.status(400).json({\n        success: false,\n        err\n      });\n      res.status(200).json({\n        success: true,\n        products,\n        postSize: products.length\n      });\n    });\n  }\n}); //?id=${productId}&type=single\n//id=12121212,121212,1212121   type=array\n\nrouter.get(\"/products_by_id\", (req, res) => {\n  let type = req.query.type;\n  let productIds = req.query.id;\n\n  if (type === \"array\") {\n    let ids = req.query.id.split(\",\");\n    productIds = [];\n    productIds = ids.map(item => {\n      return item;\n    });\n  }\n\n  if (type === \"single\") {\n    Product.findByIdAndUpdate(productIds, {\n      $inc: {\n        views: 1\n      }\n    }).exec();\n  }\n\n  Product.find({\n    _id: {\n      $in: productIds\n    }\n  }).populate(\"writer\").exec((err, product) => {\n    if (err) return res.status(400).send(err);\n    return res.status(200).send(product);\n  });\n});\nmodule.exports = router;","map":{"version":3,"sources":["/Users/iashir/Desktop/WorkProjects/Store/routes/product.js"],"names":["express","require","router","Router","Product","multer","auth","aws","multerS3","path","accessKeyId","secretAccessKey","Bucket","s3","S3","ImageUpload","storage","bucket","acl","key","req","file","cb","Date","now","originalname","fileFilter","checkFileType","single","filetypes","extname","test","toLowerCase","mimetype","post","res","err","json","success","MulterError","image","location","fileName","filename","product","body","save","status","order","sortBy","limit","parseInt","skip","findArgs","term","searchTerm","filters","length","$gte","$lte","find","$text","$search","populate","sort","exec","products","postSize","get","type","query","productIds","id","ids","split","map","item","findByIdAndUpdate","$inc","views","_id","$in","send","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\");\nconst router = express.Router();\nconst { Product } = require(\"../models/Product\");\nconst multer = require(\"multer\");\nconst { auth } = require(\"../middleware/auth\");\nconst aws = require(\"aws-sdk\");\nconst multerS3 = require(\"multer-s3\");\nconst path = require(\"path\");\nconst { accessKeyId, secretAccessKey, Bucket } = require(\"../config/key\");\nconst s3 = new aws.S3({\n  accessKeyId: accessKeyId,\n  secretAccessKey: secretAccessKey,\n  Bucket: Bucket,\n});\n\nconst ImageUpload = multer({\n  storage: multerS3({\n    s3: s3,\n    bucket: Bucket,\n    acl: \"public-read\",\n    key: function (req, file, cb) {\n      cb(null, `${Date.now()}_${file.originalname}`);\n    },\n  }),\n  fileFilter: function (req, file, cb) {\n    checkFileType(file, cb);\n  },\n}).single(\"file\");\n\nfunction checkFileType(file, cb) {\n  // Allowed ext\n  const filetypes = /jpeg|jpg|png/;\n  // Check ext\n  const extname = filetypes.test(path.extname(file.originalname).toLowerCase());\n  // Check mime\n  const mimetype = filetypes.test(file.mimetype);\n  if (mimetype && extname) {\n    return cb(null, true);\n  } else {\n    cb(\"Images Only!\");\n  }\n}\n\n//=================================\n//             Product\n//=================================\n\nrouter.post(\"/uploadImage\", auth, (req, res) => {\n  ImageUpload(req, res, (err) => {\n    if (err) {\n      return res.json({ success: false, err });\n    } else if (err instanceof multer.MulterError) {\n      return res.json({ success: false, err });\n    } else {\n      return res.json({\n        success: true,\n        image: req.file.location,\n        fileName: req.file.filename,\n      });\n    }\n  });\n});\n\nrouter.post(\"/uploadProduct\", auth, (req, res) => {\n  const product = new Product(req.body);\n\n  product.save((err) => {\n    if (err) return res.status(400).json({ success: false, err });\n    return res.status(200).json({ success: true });\n  });\n});\n\nrouter.post(\"/getProducts\", (req, res) => {\n  let order = req.body.order ? req.body.order : \"desc\";\n  let sortBy = req.body.sortBy ? req.body.sortBy : \"_id\";\n  let limit = req.body.limit ? parseInt(req.body.limit) : 100;\n  let skip = parseInt(req.body.skip);\n\n  let findArgs = {};\n  let term = req.body.searchTerm;\n\n  for (let key in req.body.filters) {\n    if (req.body.filters[key].length > 0) {\n      if (key === \"price\") {\n        findArgs[key] = {\n          $gte: req.body.filters[key][0],\n          $lte: req.body.filters[key][1],\n        };\n      } else {\n        findArgs[key] = req.body.filters[key];\n      }\n    }\n  }\n\n  if (term) {\n    Product.find(findArgs)\n      .find({ $text: { $search: term } })\n      .populate(\"writer\")\n      .sort([[sortBy, order]])\n      .skip(skip)\n      .limit(limit)\n      .exec((err, products) => {\n        if (err) return res.status(400).json({ success: false, err });\n        res\n          .status(200)\n          .json({ success: true, products, postSize: products.length });\n      });\n  } else {\n    Product.find(findArgs)\n      .populate(\"writer\")\n      .sort([[sortBy, order]])\n      .skip(skip)\n      .limit(limit)\n      .exec((err, products) => {\n        if (err) return res.status(400).json({ success: false, err });\n        res\n          .status(200)\n          .json({ success: true, products, postSize: products.length });\n      });\n  }\n});\n\n//?id=${productId}&type=single\n//id=12121212,121212,1212121   type=array\nrouter.get(\"/products_by_id\", (req, res) => {\n  let type = req.query.type;\n  let productIds = req.query.id;\n\n  if (type === \"array\") {\n    let ids = req.query.id.split(\",\");\n    productIds = [];\n    productIds = ids.map((item) => {\n      return item;\n    });\n  }\n  if (type === \"single\") {\n    Product.findByIdAndUpdate(productIds, { $inc: { views: 1 } }).exec();\n  }\n  Product.find({ _id: { $in: productIds } })\n    .populate(\"writer\")\n    .exec((err, product) => {\n      if (err) return res.status(400).send(err);\n      return res.status(200).send(product);\n    });\n});\n\nmodule.exports = router;\n"]},"metadata":{},"sourceType":"script"}
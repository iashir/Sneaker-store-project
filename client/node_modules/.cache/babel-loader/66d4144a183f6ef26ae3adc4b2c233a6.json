{"ast":null,"code":"const express = require(\"express\");\n\nconst router = express.Router();\n\nconst {\n  User\n} = require(\"../models/User\");\n\nconst {\n  Product\n} = require(\"../models/Product\");\n\nconst {\n  auth\n} = require(\"../middleware/auth\");\n\nconst {\n  Payment\n} = require(\"../models/Payment\");\n\nconst async = require(\"async\"); //=================================\n//             User\n//=================================\n\n\nrouter.get(\"/auth\", auth, (req, res) => {\n  res.status(200).json({\n    _id: req.user._id,\n    isAdmin: req.user.role === 0 ? false : true,\n    isAuth: true,\n    email: req.user.email,\n    name: req.user.name,\n    lastname: req.user.lastname,\n    role: req.user.role,\n    image: req.user.image,\n    cart: req.user.cart,\n    history: req.user.history\n  });\n});\nrouter.post(\"/register\", (req, res) => {\n  const user = new User(req.body);\n  user.save((err, doc) => {\n    if (err) return res.json({\n      success: false,\n      err\n    });\n    return res.status(200).json({\n      success: true,\n      email: doc.email\n    });\n  });\n});\nrouter.post(\"/login\", (req, res) => {\n  User.findOne({\n    email: req.body.email\n  }, (err, user) => {\n    if (!user) return res.json({\n      loginSuccess: false,\n      message: \"Auth failed, email not found\"\n    });\n    user.comparePassword(req.body.password, (err, isMatch) => {\n      if (!isMatch) return res.json({\n        loginSuccess: false,\n        message: \"Wrong password\"\n      });\n      user.generateToken((err, user) => {\n        if (err) return res.status(400).send(err);\n        res.cookie(\"w_auth\", user.token).status(200).json({\n          loginSuccess: true,\n          userId: user._id\n        });\n      });\n    });\n  });\n});\nrouter.get(\"/logout\", auth, (req, res) => {\n  User.findOneAndUpdate({\n    _id: req.user._id\n  }, {\n    token: \"\",\n    tokenExp: \"\"\n  }, (err, doc) => {\n    if (err) return res.json({\n      success: false,\n      err\n    });\n    return res.status(200).send({\n      success: true\n    });\n  });\n});\nrouter.get(\"/addToCart\", auth, (req, res) => {\n  User.findOne({\n    _id: req.user._id\n  }, (err, userInfo) => {\n    let duplicate = false;\n    userInfo.cart.forEach(item => {\n      if (item.id == req.query.productId) {\n        duplicate = true;\n      }\n    });\n\n    if (duplicate) {\n      const quantity = req.query.quantity !== \"null\" ? {\n        \"cart.$.quantity\": parseInt(req.query.quantity)\n      } : {};\n      User.findOneAndUpdate({\n        _id: req.user._id,\n        \"cart.id\": req.query.productId\n      }, quantity, {\n        new: true\n      }, (err, userInfo) => {\n        if (err) return res.json({\n          success: false,\n          err\n        });\n        res.status(200).json(userInfo.cart);\n      });\n    } else {\n      User.findOneAndUpdate({\n        _id: req.user._id\n      }, {\n        $push: {\n          cart: {\n            id: req.query.productId,\n            quantity: 1,\n            date: Date.now()\n          }\n        }\n      }, {\n        new: true\n      }, (err, userInfo) => {\n        if (err) return res.json({\n          success: false,\n          err\n        });\n        res.status(200).json(userInfo.cart);\n      });\n    }\n  });\n});\nrouter.get(\"/removeFromCart\", auth, (req, res) => {\n  User.findOneAndUpdate({\n    _id: req.user._id\n  }, {\n    $pull: {\n      cart: {\n        id: req.query._id\n      }\n    }\n  }, {\n    new: true\n  }, (err, userInfo) => {\n    let cart = userInfo.cart;\n    let array = cart.map(item => {\n      return item.id;\n    });\n    Product.find({\n      _id: {\n        $in: array\n      }\n    }).populate(\"writer\").exec((err, cartDetail) => {\n      return res.status(200).json({\n        cartDetail,\n        cart\n      });\n    });\n  });\n});\nrouter.get(\"/userCartInfo\", auth, (req, res) => {\n  User.findOne({\n    _id: req.user._id\n  }, (err, userInfo) => {\n    let cart = userInfo.cart;\n    let array = cart.map(item => {\n      return item.id;\n    });\n    Product.find({\n      _id: {\n        $in: array\n      }\n    }).populate(\"writer\").exec((err, cartDetail) => {\n      if (err) return res.status(400).send(err);\n      return res.status(200).json({\n        success: true,\n        cartDetail,\n        cart\n      });\n    });\n  });\n});\nrouter.post(\"/successBuy\", auth, (req, res) => {\n  let history = [];\n  let transactionData = {}; //1.Put brief Payment Information inside User Collection\n\n  req.body.cartDetail.forEach(item => {\n    history.push({\n      dateOfPurchase: Date.now(),\n      name: item.title,\n      id: item._id,\n      price: item.price,\n      quantity: item.quantity,\n      paymentId: req.body.paymentData.paymentID\n    });\n  }); //2.Put Payment Information that come from Paypal into Payment Collection\n\n  transactionData.user = {\n    id: req.user._id,\n    name: req.user.name,\n    lastname: req.user.lastname,\n    email: req.user.email\n  };\n  transactionData.data = req.body.paymentData;\n  transactionData.product = history;\n  User.findOneAndUpdate({\n    _id: req.user._id\n  }, {\n    $push: {\n      history: history\n    },\n    $set: {\n      cart: []\n    }\n  }, {\n    new: true\n  }, (err, user) => {\n    if (err) return res.json({\n      success: false,\n      err\n    });\n    const payment = new Payment(transactionData);\n    payment.save((err, doc) => {\n      if (err) return res.json({\n        success: false,\n        err\n      }); //3. Increase the amount of number for the sold information\n      //how many product were sold in this transaction for\n      // each of products\n\n      let products = [];\n      doc.product.forEach(item => {\n        products.push({\n          id: item.id,\n          quantity: item.quantity\n        });\n      }); // first Item    quantity 2\n      // second Item  quantity 3\n\n      async.eachSeries(products, (item, callback) => {\n        Product.update({\n          _id: item.id\n        }, {\n          $inc: {\n            sold: item.quantity\n          }\n        }, {\n          new: false\n        }, callback);\n      }, err => {\n        if (err) return res.json({\n          success: false,\n          err\n        });\n        res.status(200).json({\n          success: true,\n          cart: user.cart,\n          cartDetail: []\n        });\n      });\n    });\n  });\n});\nrouter.get(\"/getHistory\", auth, (req, res) => {\n  User.findOne({\n    _id: req.user._id\n  }, (err, doc) => {\n    let history = doc.history;\n    if (err) return res.status(400).send(err);\n    return res.status(200).json({\n      success: true,\n      history\n    });\n  });\n});\nmodule.exports = router;","map":{"version":3,"sources":["/Users/iashir/Desktop/WorkProjects/Store/routes/users.js"],"names":["express","require","router","Router","User","Product","auth","Payment","async","get","req","res","status","json","_id","user","isAdmin","role","isAuth","email","name","lastname","image","cart","history","post","body","save","err","doc","success","findOne","loginSuccess","message","comparePassword","password","isMatch","generateToken","send","cookie","token","userId","findOneAndUpdate","tokenExp","userInfo","duplicate","forEach","item","id","query","productId","quantity","parseInt","new","$push","date","Date","now","$pull","array","map","find","$in","populate","exec","cartDetail","transactionData","push","dateOfPurchase","title","price","paymentId","paymentData","paymentID","data","product","$set","payment","products","eachSeries","callback","update","$inc","sold","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\");\nconst router = express.Router();\nconst { User } = require(\"../models/User\");\nconst { Product } = require(\"../models/Product\");\nconst { auth } = require(\"../middleware/auth\");\nconst { Payment } = require(\"../models/Payment\");\n\nconst async = require(\"async\");\n\n//=================================\n//             User\n//=================================\n\nrouter.get(\"/auth\", auth, (req, res) => {\n  res.status(200).json({\n    _id: req.user._id,\n    isAdmin: req.user.role === 0 ? false : true,\n    isAuth: true,\n    email: req.user.email,\n    name: req.user.name,\n    lastname: req.user.lastname,\n    role: req.user.role,\n    image: req.user.image,\n    cart: req.user.cart,\n    history: req.user.history,\n  });\n});\n\nrouter.post(\"/register\", (req, res) => {\n  const user = new User(req.body);\n\n  user.save((err, doc) => {\n    if (err) return res.json({ success: false, err });\n    return res.status(200).json({\n      success: true,\n      email: doc.email,\n    });\n  });\n});\n\nrouter.post(\"/login\", (req, res) => {\n  User.findOne({ email: req.body.email }, (err, user) => {\n    if (!user)\n      return res.json({\n        loginSuccess: false,\n        message: \"Auth failed, email not found\",\n      });\n\n    user.comparePassword(req.body.password, (err, isMatch) => {\n      if (!isMatch)\n        return res.json({ loginSuccess: false, message: \"Wrong password\" });\n\n      user.generateToken((err, user) => {\n        if (err) return res.status(400).send(err);\n        res.cookie(\"w_auth\", user.token).status(200).json({\n          loginSuccess: true,\n          userId: user._id,\n        });\n      });\n    });\n  });\n});\n\nrouter.get(\"/logout\", auth, (req, res) => {\n  User.findOneAndUpdate(\n    { _id: req.user._id },\n    { token: \"\", tokenExp: \"\" },\n    (err, doc) => {\n      if (err) return res.json({ success: false, err });\n      return res.status(200).send({\n        success: true,\n      });\n    }\n  );\n});\n\nrouter.get(\"/addToCart\", auth, (req, res) => {\n  User.findOne({ _id: req.user._id }, (err, userInfo) => {\n    let duplicate = false;\n\n    userInfo.cart.forEach((item) => {\n      if (item.id == req.query.productId) {\n        duplicate = true;\n      }\n    });\n\n    if (duplicate) {\n      const quantity =\n        req.query.quantity !== \"null\"\n          ? { \"cart.$.quantity\": parseInt(req.query.quantity) }\n          : {};\n      User.findOneAndUpdate(\n        { _id: req.user._id, \"cart.id\": req.query.productId },\n        quantity,\n        { new: true },\n        (err, userInfo) => {\n          if (err) return res.json({ success: false, err });\n          res.status(200).json(userInfo.cart);\n        }\n      );\n    } else {\n      User.findOneAndUpdate(\n        { _id: req.user._id },\n        {\n          $push: {\n            cart: {\n              id: req.query.productId,\n              quantity: 1,\n              date: Date.now(),\n            },\n          },\n        },\n        { new: true },\n        (err, userInfo) => {\n          if (err) return res.json({ success: false, err });\n          res.status(200).json(userInfo.cart);\n        }\n      );\n    }\n  });\n});\n\nrouter.get(\"/removeFromCart\", auth, (req, res) => {\n  User.findOneAndUpdate(\n    { _id: req.user._id },\n    {\n      $pull: { cart: { id: req.query._id } },\n    },\n    { new: true },\n    (err, userInfo) => {\n      let cart = userInfo.cart;\n      let array = cart.map((item) => {\n        return item.id;\n      });\n\n      Product.find({ _id: { $in: array } })\n        .populate(\"writer\")\n        .exec((err, cartDetail) => {\n          return res.status(200).json({\n            cartDetail,\n            cart,\n          });\n        });\n    }\n  );\n});\n\nrouter.get(\"/userCartInfo\", auth, (req, res) => {\n  User.findOne({ _id: req.user._id }, (err, userInfo) => {\n    let cart = userInfo.cart;\n    let array = cart.map((item) => {\n      return item.id;\n    });\n\n    Product.find({ _id: { $in: array } })\n      .populate(\"writer\")\n      .exec((err, cartDetail) => {\n        if (err) return res.status(400).send(err);\n        return res.status(200).json({ success: true, cartDetail, cart });\n      });\n  });\n});\n\nrouter.post(\"/successBuy\", auth, (req, res) => {\n  let history = [];\n  let transactionData = {};\n\n  //1.Put brief Payment Information inside User Collection\n  req.body.cartDetail.forEach((item) => {\n    history.push({\n      dateOfPurchase: Date.now(),\n      name: item.title,\n      id: item._id,\n      price: item.price,\n      quantity: item.quantity,\n      paymentId: req.body.paymentData.paymentID,\n    });\n  });\n\n  //2.Put Payment Information that come from Paypal into Payment Collection\n  transactionData.user = {\n    id: req.user._id,\n    name: req.user.name,\n    lastname: req.user.lastname,\n    email: req.user.email,\n  };\n\n  transactionData.data = req.body.paymentData;\n  transactionData.product = history;\n\n  User.findOneAndUpdate(\n    { _id: req.user._id },\n    { $push: { history: history }, $set: { cart: [] } },\n    { new: true },\n    (err, user) => {\n      if (err) return res.json({ success: false, err });\n\n      const payment = new Payment(transactionData);\n      payment.save((err, doc) => {\n        if (err) return res.json({ success: false, err });\n\n        //3. Increase the amount of number for the sold information\n\n        //how many product were sold in this transaction for\n        // each of products\n\n        let products = [];\n        doc.product.forEach((item) => {\n          products.push({ id: item.id, quantity: item.quantity });\n        });\n\n        // first Item    quantity 2\n        // second Item  quantity 3\n\n        async.eachSeries(\n          products,\n          (item, callback) => {\n            Product.update(\n              { _id: item.id },\n              {\n                $inc: {\n                  sold: item.quantity,\n                },\n              },\n              { new: false },\n              callback\n            );\n          },\n          (err) => {\n            if (err) return res.json({ success: false, err });\n            res.status(200).json({\n              success: true,\n              cart: user.cart,\n              cartDetail: [],\n            });\n          }\n        );\n      });\n    }\n  );\n});\n\nrouter.get(\"/getHistory\", auth, (req, res) => {\n  User.findOne({ _id: req.user._id }, (err, doc) => {\n    let history = doc.history;\n    if (err) return res.status(400).send(err);\n    return res.status(200).json({ success: true, history });\n  });\n});\n\nmodule.exports = router;\n"]},"metadata":{},"sourceType":"script"}
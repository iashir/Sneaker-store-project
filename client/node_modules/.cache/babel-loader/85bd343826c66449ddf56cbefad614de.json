{"ast":null,"code":"const mongoose = require(\"mongoose\");\n\nconst bcrypt = require(\"bcrypt\");\n\nconst saltRounds = 10;\n\nconst jwt = require(\"jsonwebtoken\");\n\nconst userSchema = mongoose.Schema({\n  name: {\n    type: String,\n    maxlength: 50\n  },\n  email: {\n    type: String,\n    trim: true,\n    unique: 1\n  },\n  password: {\n    type: String,\n    minglength: 5\n  },\n  lastname: {\n    type: String,\n    maxlength: 50\n  },\n  role: {\n    type: Number,\n    default: 0\n  },\n  cart: {\n    type: Array,\n    default: []\n  },\n  history: {\n    type: Array,\n    default: []\n  },\n  image: String,\n  token: {\n    type: String\n  },\n  tokenExp: {\n    type: Number\n  }\n});\nuserSchema.pre(\"save\", function (next) {\n  var user = this;\n\n  if (user.isModified(\"password\")) {\n    bcrypt.genSalt(saltRounds, function (err, salt) {\n      if (err) return next(err);\n      bcrypt.hash(user.password, salt, function (err, hash) {\n        if (err) return next(err);\n        user.password = hash;\n        next();\n      });\n    });\n  } else {\n    next();\n  }\n});\n\nuserSchema.methods.comparePassword = function (plainPassword, cb) {\n  bcrypt.compare(plainPassword, this.password, function (err, isMatch) {\n    if (err) return cb(err);\n    cb(null, isMatch);\n  });\n};\n\nuserSchema.methods.generateToken = function (cb) {\n  var user = this;\n  var token = jwt.sign({\n    data: user._id.toHexString()\n  }, \"secret\", {\n    expiresIn: \"1h\"\n  });\n  user.token = token;\n  user.save(function (err, user) {\n    if (err) return cb(err);\n    cb(null, user);\n  });\n};\n\nuserSchema.statics.findByToken = function (token, cb) {\n  var user = this;\n  jwt.verify(token, \"secret\", function (err, decode) {\n    if (err) {\n      User.findOneAndUpdate({\n        token: token\n      }, {\n        token: \"\",\n        tokenExp: \"\"\n      }).exec();\n      return cb({\n        isAuth: false,\n        error: true\n      });\n    }\n\n    user.findOne({\n      _id: decode.data,\n      token: token\n    }, function (err, user) {\n      if (err) return cb(err);\n      cb(null, user);\n    });\n  });\n};\n\nconst User = mongoose.model(\"User\", userSchema);\nmodule.exports = {\n  User\n};","map":{"version":3,"sources":["/Users/iashir/Desktop/WorkProjects/Store/models/User.js"],"names":["mongoose","require","bcrypt","saltRounds","jwt","userSchema","Schema","name","type","String","maxlength","email","trim","unique","password","minglength","lastname","role","Number","default","cart","Array","history","image","token","tokenExp","pre","next","user","isModified","genSalt","err","salt","hash","methods","comparePassword","plainPassword","cb","compare","isMatch","generateToken","sign","data","_id","toHexString","expiresIn","save","statics","findByToken","verify","decode","User","findOneAndUpdate","exec","isAuth","error","findOne","model","module","exports"],"mappings":"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","sourcesContent":["const mongoose = require(\"mongoose\");\nconst bcrypt = require(\"bcrypt\");\nconst saltRounds = 10;\nconst jwt = require(\"jsonwebtoken\");\n\nconst userSchema = mongoose.Schema({\n  name: {\n    type: String,\n    maxlength: 50,\n  },\n  email: {\n    type: String,\n    trim: true,\n    unique: 1,\n  },\n  password: {\n    type: String,\n    minglength: 5,\n  },\n  lastname: {\n    type: String,\n    maxlength: 50,\n  },\n  role: {\n    type: Number,\n    default: 0,\n  },\n  cart: {\n    type: Array,\n    default: [],\n  },\n  history: {\n    type: Array,\n    default: [],\n  },\n  image: String,\n  token: {\n    type: String,\n  },\n  tokenExp: {\n    type: Number,\n  },\n});\n\nuserSchema.pre(\"save\", function (next) {\n  var user = this;\n\n  if (user.isModified(\"password\")) {\n    bcrypt.genSalt(saltRounds, function (err, salt) {\n      if (err) return next(err);\n\n      bcrypt.hash(user.password, salt, function (err, hash) {\n        if (err) return next(err);\n        user.password = hash;\n        next();\n      });\n    });\n  } else {\n    next();\n  }\n});\n\nuserSchema.methods.comparePassword = function (plainPassword, cb) {\n  bcrypt.compare(plainPassword, this.password, function (err, isMatch) {\n    if (err) return cb(err);\n    cb(null, isMatch);\n  });\n};\n\nuserSchema.methods.generateToken = function (cb) {\n  var user = this;\n  var token = jwt.sign({ data: user._id.toHexString() }, \"secret\", {\n    expiresIn: \"1h\",\n  });\n\n  user.token = token;\n  user.save(function (err, user) {\n    if (err) return cb(err);\n    cb(null, user);\n  });\n};\n\nuserSchema.statics.findByToken = function (token, cb) {\n  var user = this;\n  jwt.verify(token, \"secret\", function (err, decode) {\n    if (err) {\n      User.findOneAndUpdate(\n        { token: token },\n        { token: \"\", tokenExp: \"\" }\n      ).exec();\n      return cb({\n        isAuth: false,\n        error: true,\n      });\n    }\n    user.findOne({ _id: decode.data, token: token }, function (err, user) {\n      if (err) return cb(err);\n      cb(null, user);\n    });\n  });\n};\n\nconst User = mongoose.model(\"User\", userSchema);\n\nmodule.exports = { User };\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var crypto = require('crypto');\n\nvar stream = require('stream');\n\nvar fileType = require('file-type');\n\nvar isSvg = require('is-svg');\n\nvar parallel = require('run-parallel');\n\nfunction staticValue(value) {\n  return function (req, file, cb) {\n    cb(null, value);\n  };\n}\n\nvar defaultAcl = staticValue('private');\nvar defaultContentType = staticValue('application/octet-stream');\nvar defaultMetadata = staticValue(null);\nvar defaultCacheControl = staticValue(null);\nvar defaultContentDisposition = staticValue(null);\nvar defaultStorageClass = staticValue('STANDARD');\nvar defaultSSE = staticValue(null);\nvar defaultSSEKMS = staticValue(null);\n\nfunction defaultKey(req, file, cb) {\n  crypto.randomBytes(16, function (err, raw) {\n    cb(err, err ? undefined : raw.toString('hex'));\n  });\n}\n\nfunction autoContentType(req, file, cb) {\n  file.stream.once('data', function (firstChunk) {\n    var type = fileType(firstChunk);\n    var mime;\n\n    if (type) {\n      mime = type.mime;\n    } else if (isSvg(firstChunk)) {\n      mime = 'image/svg+xml';\n    } else {\n      mime = 'application/octet-stream';\n    }\n\n    var outStream = new stream.PassThrough();\n    outStream.write(firstChunk);\n    file.stream.pipe(outStream);\n    cb(null, mime, outStream);\n  });\n}\n\nfunction collect(storage, req, file, cb) {\n  parallel([storage.getBucket.bind(storage, req, file), storage.getKey.bind(storage, req, file), storage.getAcl.bind(storage, req, file), storage.getMetadata.bind(storage, req, file), storage.getCacheControl.bind(storage, req, file), storage.getContentDisposition.bind(storage, req, file), storage.getStorageClass.bind(storage, req, file), storage.getSSE.bind(storage, req, file), storage.getSSEKMS.bind(storage, req, file)], function (err, values) {\n    if (err) return cb(err);\n    storage.getContentType(req, file, function (err, contentType, replacementStream) {\n      if (err) return cb(err);\n      cb.call(storage, null, {\n        bucket: values[0],\n        key: values[1],\n        acl: values[2],\n        metadata: values[3],\n        cacheControl: values[4],\n        contentDisposition: values[5],\n        storageClass: values[6],\n        contentType: contentType,\n        replacementStream: replacementStream,\n        serverSideEncryption: values[7],\n        sseKmsKeyId: values[8]\n      });\n    });\n  });\n}\n\nfunction S3Storage(opts) {\n  switch (typeof opts.s3) {\n    case 'object':\n      this.s3 = opts.s3;\n      break;\n\n    default:\n      throw new TypeError('Expected opts.s3 to be object');\n  }\n\n  switch (typeof opts.bucket) {\n    case 'function':\n      this.getBucket = opts.bucket;\n      break;\n\n    case 'string':\n      this.getBucket = staticValue(opts.bucket);\n      break;\n\n    case 'undefined':\n      throw new Error('bucket is required');\n\n    default:\n      throw new TypeError('Expected opts.bucket to be undefined, string or function');\n  }\n\n  switch (typeof opts.key) {\n    case 'function':\n      this.getKey = opts.key;\n      break;\n\n    case 'undefined':\n      this.getKey = defaultKey;\n      break;\n\n    default:\n      throw new TypeError('Expected opts.key to be undefined or function');\n  }\n\n  switch (typeof opts.acl) {\n    case 'function':\n      this.getAcl = opts.acl;\n      break;\n\n    case 'string':\n      this.getAcl = staticValue(opts.acl);\n      break;\n\n    case 'undefined':\n      this.getAcl = defaultAcl;\n      break;\n\n    default:\n      throw new TypeError('Expected opts.acl to be undefined, string or function');\n  }\n\n  switch (typeof opts.contentType) {\n    case 'function':\n      this.getContentType = opts.contentType;\n      break;\n\n    case 'undefined':\n      this.getContentType = defaultContentType;\n      break;\n\n    default:\n      throw new TypeError('Expected opts.contentType to be undefined or function');\n  }\n\n  switch (typeof opts.metadata) {\n    case 'function':\n      this.getMetadata = opts.metadata;\n      break;\n\n    case 'undefined':\n      this.getMetadata = defaultMetadata;\n      break;\n\n    default:\n      throw new TypeError('Expected opts.metadata to be undefined or function');\n  }\n\n  switch (typeof opts.cacheControl) {\n    case 'function':\n      this.getCacheControl = opts.cacheControl;\n      break;\n\n    case 'string':\n      this.getCacheControl = staticValue(opts.cacheControl);\n      break;\n\n    case 'undefined':\n      this.getCacheControl = defaultCacheControl;\n      break;\n\n    default:\n      throw new TypeError('Expected opts.cacheControl to be undefined, string or function');\n  }\n\n  switch (typeof opts.contentDisposition) {\n    case 'function':\n      this.getContentDisposition = opts.contentDisposition;\n      break;\n\n    case 'string':\n      this.getContentDisposition = staticValue(opts.contentDisposition);\n      break;\n\n    case 'undefined':\n      this.getContentDisposition = defaultContentDisposition;\n      break;\n\n    default:\n      throw new TypeError('Expected opts.contentDisposition to be undefined, string or function');\n  }\n\n  switch (typeof opts.storageClass) {\n    case 'function':\n      this.getStorageClass = opts.storageClass;\n      break;\n\n    case 'string':\n      this.getStorageClass = staticValue(opts.storageClass);\n      break;\n\n    case 'undefined':\n      this.getStorageClass = defaultStorageClass;\n      break;\n\n    default:\n      throw new TypeError('Expected opts.storageClass to be undefined, string or function');\n  }\n\n  switch (typeof opts.serverSideEncryption) {\n    case 'function':\n      this.getSSE = opts.serverSideEncryption;\n      break;\n\n    case 'string':\n      this.getSSE = staticValue(opts.serverSideEncryption);\n      break;\n\n    case 'undefined':\n      this.getSSE = defaultSSE;\n      break;\n\n    default:\n      throw new TypeError('Expected opts.serverSideEncryption to be undefined, string or function');\n  }\n\n  switch (typeof opts.sseKmsKeyId) {\n    case 'function':\n      this.getSSEKMS = opts.sseKmsKeyId;\n      break;\n\n    case 'string':\n      this.getSSEKMS = staticValue(opts.sseKmsKeyId);\n      break;\n\n    case 'undefined':\n      this.getSSEKMS = defaultSSEKMS;\n      break;\n\n    default:\n      throw new TypeError('Expected opts.sseKmsKeyId to be undefined, string, or function');\n  }\n}\n\nS3Storage.prototype._handleFile = function (req, file, cb) {\n  collect(this, req, file, function (err, opts) {\n    if (err) return cb(err);\n    var currentSize = 0;\n    var params = {\n      Bucket: opts.bucket,\n      Key: opts.key,\n      ACL: opts.acl,\n      CacheControl: opts.cacheControl,\n      ContentType: opts.contentType,\n      Metadata: opts.metadata,\n      StorageClass: opts.storageClass,\n      ServerSideEncryption: opts.serverSideEncryption,\n      SSEKMSKeyId: opts.sseKmsKeyId,\n      Body: opts.replacementStream || file.stream\n    };\n\n    if (opts.contentDisposition) {\n      params.ContentDisposition = opts.contentDisposition;\n    }\n\n    var upload = this.s3.upload(params);\n    upload.on('httpUploadProgress', function (ev) {\n      if (ev.total) currentSize = ev.total;\n    });\n    upload.send(function (err, result) {\n      if (err) return cb(err);\n      cb(null, {\n        size: currentSize,\n        bucket: opts.bucket,\n        key: opts.key,\n        acl: opts.acl,\n        contentType: opts.contentType,\n        contentDisposition: opts.contentDisposition,\n        storageClass: opts.storageClass,\n        serverSideEncryption: opts.serverSideEncryption,\n        metadata: opts.metadata,\n        location: result.Location,\n        etag: result.ETag,\n        versionId: result.VersionId\n      });\n    });\n  });\n};\n\nS3Storage.prototype._removeFile = function (req, file, cb) {\n  this.s3.deleteObject({\n    Bucket: file.bucket,\n    Key: file.key\n  }, cb);\n};\n\nmodule.exports = function (opts) {\n  return new S3Storage(opts);\n};\n\nmodule.exports.AUTO_CONTENT_TYPE = autoContentType;\nmodule.exports.DEFAULT_CONTENT_TYPE = defaultContentType;","map":{"version":3,"sources":["/Users/iashir/Desktop/WorkProjects/Store/node_modules/multer-s3/index.js"],"names":["crypto","require","stream","fileType","isSvg","parallel","staticValue","value","req","file","cb","defaultAcl","defaultContentType","defaultMetadata","defaultCacheControl","defaultContentDisposition","defaultStorageClass","defaultSSE","defaultSSEKMS","defaultKey","randomBytes","err","raw","undefined","toString","autoContentType","once","firstChunk","type","mime","outStream","PassThrough","write","pipe","collect","storage","getBucket","bind","getKey","getAcl","getMetadata","getCacheControl","getContentDisposition","getStorageClass","getSSE","getSSEKMS","values","getContentType","contentType","replacementStream","call","bucket","key","acl","metadata","cacheControl","contentDisposition","storageClass","serverSideEncryption","sseKmsKeyId","S3Storage","opts","s3","TypeError","Error","prototype","_handleFile","currentSize","params","Bucket","Key","ACL","CacheControl","ContentType","Metadata","StorageClass","ServerSideEncryption","SSEKMSKeyId","Body","ContentDisposition","upload","on","ev","total","send","result","size","location","Location","etag","ETag","versionId","VersionId","_removeFile","deleteObject","module","exports","AUTO_CONTENT_TYPE","DEFAULT_CONTENT_TYPE"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,QAAD,CAAnB;;AACA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,cAAD,CAAtB;;AAEA,SAASK,WAAT,CAAsBC,KAAtB,EAA6B;AAC3B,SAAO,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AAC9BA,IAAAA,EAAE,CAAC,IAAD,EAAOH,KAAP,CAAF;AACD,GAFD;AAGD;;AAED,IAAII,UAAU,GAAGL,WAAW,CAAC,SAAD,CAA5B;AACA,IAAIM,kBAAkB,GAAGN,WAAW,CAAC,0BAAD,CAApC;AAEA,IAAIO,eAAe,GAAGP,WAAW,CAAC,IAAD,CAAjC;AACA,IAAIQ,mBAAmB,GAAGR,WAAW,CAAC,IAAD,CAArC;AACA,IAAIS,yBAAyB,GAAGT,WAAW,CAAC,IAAD,CAA3C;AACA,IAAIU,mBAAmB,GAAGV,WAAW,CAAC,UAAD,CAArC;AACA,IAAIW,UAAU,GAAGX,WAAW,CAAC,IAAD,CAA5B;AACA,IAAIY,aAAa,GAAGZ,WAAW,CAAC,IAAD,CAA/B;;AAEA,SAASa,UAAT,CAAqBX,GAArB,EAA0BC,IAA1B,EAAgCC,EAAhC,EAAoC;AAClCV,EAAAA,MAAM,CAACoB,WAAP,CAAmB,EAAnB,EAAuB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACzCZ,IAAAA,EAAE,CAACW,GAAD,EAAMA,GAAG,GAAGE,SAAH,GAAeD,GAAG,CAACE,QAAJ,CAAa,KAAb,CAAxB,CAAF;AACD,GAFD;AAGD;;AAED,SAASC,eAAT,CAA0BjB,GAA1B,EAA+BC,IAA/B,EAAqCC,EAArC,EAAyC;AACvCD,EAAAA,IAAI,CAACP,MAAL,CAAYwB,IAAZ,CAAiB,MAAjB,EAAyB,UAAUC,UAAV,EAAsB;AAC7C,QAAIC,IAAI,GAAGzB,QAAQ,CAACwB,UAAD,CAAnB;AACA,QAAIE,IAAJ;;AAEA,QAAID,IAAJ,EAAU;AACRC,MAAAA,IAAI,GAAGD,IAAI,CAACC,IAAZ;AACD,KAFD,MAEO,IAAIzB,KAAK,CAACuB,UAAD,CAAT,EAAuB;AAC5BE,MAAAA,IAAI,GAAG,eAAP;AACD,KAFM,MAEA;AACLA,MAAAA,IAAI,GAAG,0BAAP;AACD;;AAED,QAAIC,SAAS,GAAG,IAAI5B,MAAM,CAAC6B,WAAX,EAAhB;AAEAD,IAAAA,SAAS,CAACE,KAAV,CAAgBL,UAAhB;AACAlB,IAAAA,IAAI,CAACP,MAAL,CAAY+B,IAAZ,CAAiBH,SAAjB;AAEApB,IAAAA,EAAE,CAAC,IAAD,EAAOmB,IAAP,EAAaC,SAAb,CAAF;AACD,GAlBD;AAmBD;;AAED,SAASI,OAAT,CAAkBC,OAAlB,EAA2B3B,GAA3B,EAAgCC,IAAhC,EAAsCC,EAAtC,EAA0C;AACxCL,EAAAA,QAAQ,CAAC,CACP8B,OAAO,CAACC,SAAR,CAAkBC,IAAlB,CAAuBF,OAAvB,EAAgC3B,GAAhC,EAAqCC,IAArC,CADO,EAEP0B,OAAO,CAACG,MAAR,CAAeD,IAAf,CAAoBF,OAApB,EAA6B3B,GAA7B,EAAkCC,IAAlC,CAFO,EAGP0B,OAAO,CAACI,MAAR,CAAeF,IAAf,CAAoBF,OAApB,EAA6B3B,GAA7B,EAAkCC,IAAlC,CAHO,EAIP0B,OAAO,CAACK,WAAR,CAAoBH,IAApB,CAAyBF,OAAzB,EAAkC3B,GAAlC,EAAuCC,IAAvC,CAJO,EAKP0B,OAAO,CAACM,eAAR,CAAwBJ,IAAxB,CAA6BF,OAA7B,EAAsC3B,GAAtC,EAA2CC,IAA3C,CALO,EAMP0B,OAAO,CAACO,qBAAR,CAA8BL,IAA9B,CAAmCF,OAAnC,EAA4C3B,GAA5C,EAAiDC,IAAjD,CANO,EAOP0B,OAAO,CAACQ,eAAR,CAAwBN,IAAxB,CAA6BF,OAA7B,EAAsC3B,GAAtC,EAA2CC,IAA3C,CAPO,EAQP0B,OAAO,CAACS,MAAR,CAAeP,IAAf,CAAoBF,OAApB,EAA6B3B,GAA7B,EAAkCC,IAAlC,CARO,EASP0B,OAAO,CAACU,SAAR,CAAkBR,IAAlB,CAAuBF,OAAvB,EAAgC3B,GAAhC,EAAqCC,IAArC,CATO,CAAD,EAUL,UAAUY,GAAV,EAAeyB,MAAf,EAAuB;AACxB,QAAIzB,GAAJ,EAAS,OAAOX,EAAE,CAACW,GAAD,CAAT;AAETc,IAAAA,OAAO,CAACY,cAAR,CAAuBvC,GAAvB,EAA4BC,IAA5B,EAAkC,UAAUY,GAAV,EAAe2B,WAAf,EAA4BC,iBAA5B,EAA+C;AAC/E,UAAI5B,GAAJ,EAAS,OAAOX,EAAE,CAACW,GAAD,CAAT;AAETX,MAAAA,EAAE,CAACwC,IAAH,CAAQf,OAAR,EAAiB,IAAjB,EAAuB;AACrBgB,QAAAA,MAAM,EAAEL,MAAM,CAAC,CAAD,CADO;AAErBM,QAAAA,GAAG,EAAEN,MAAM,CAAC,CAAD,CAFU;AAGrBO,QAAAA,GAAG,EAAEP,MAAM,CAAC,CAAD,CAHU;AAIrBQ,QAAAA,QAAQ,EAAER,MAAM,CAAC,CAAD,CAJK;AAKrBS,QAAAA,YAAY,EAAET,MAAM,CAAC,CAAD,CALC;AAMrBU,QAAAA,kBAAkB,EAAEV,MAAM,CAAC,CAAD,CANL;AAOrBW,QAAAA,YAAY,EAAEX,MAAM,CAAC,CAAD,CAPC;AAQrBE,QAAAA,WAAW,EAAEA,WARQ;AASrBC,QAAAA,iBAAiB,EAAEA,iBATE;AAUrBS,QAAAA,oBAAoB,EAAEZ,MAAM,CAAC,CAAD,CAVP;AAWrBa,QAAAA,WAAW,EAAEb,MAAM,CAAC,CAAD;AAXE,OAAvB;AAaD,KAhBD;AAiBD,GA9BO,CAAR;AA+BD;;AAED,SAASc,SAAT,CAAoBC,IAApB,EAA0B;AACxB,UAAQ,OAAOA,IAAI,CAACC,EAApB;AACE,SAAK,QAAL;AAAe,WAAKA,EAAL,GAAUD,IAAI,CAACC,EAAf;AAAmB;;AAClC;AAAS,YAAM,IAAIC,SAAJ,CAAc,+BAAd,CAAN;AAFX;;AAKA,UAAQ,OAAOF,IAAI,CAACV,MAApB;AACE,SAAK,UAAL;AAAiB,WAAKf,SAAL,GAAiByB,IAAI,CAACV,MAAtB;AAA8B;;AAC/C,SAAK,QAAL;AAAe,WAAKf,SAAL,GAAiB9B,WAAW,CAACuD,IAAI,CAACV,MAAN,CAA5B;AAA2C;;AAC1D,SAAK,WAAL;AAAkB,YAAM,IAAIa,KAAJ,CAAU,oBAAV,CAAN;;AAClB;AAAS,YAAM,IAAID,SAAJ,CAAc,0DAAd,CAAN;AAJX;;AAOA,UAAQ,OAAOF,IAAI,CAACT,GAApB;AACE,SAAK,UAAL;AAAiB,WAAKd,MAAL,GAAcuB,IAAI,CAACT,GAAnB;AAAwB;;AACzC,SAAK,WAAL;AAAkB,WAAKd,MAAL,GAAcnB,UAAd;AAA0B;;AAC5C;AAAS,YAAM,IAAI4C,SAAJ,CAAc,+CAAd,CAAN;AAHX;;AAMA,UAAQ,OAAOF,IAAI,CAACR,GAApB;AACE,SAAK,UAAL;AAAiB,WAAKd,MAAL,GAAcsB,IAAI,CAACR,GAAnB;AAAwB;;AACzC,SAAK,QAAL;AAAe,WAAKd,MAAL,GAAcjC,WAAW,CAACuD,IAAI,CAACR,GAAN,CAAzB;AAAqC;;AACpD,SAAK,WAAL;AAAkB,WAAKd,MAAL,GAAc5B,UAAd;AAA0B;;AAC5C;AAAS,YAAM,IAAIoD,SAAJ,CAAc,uDAAd,CAAN;AAJX;;AAOA,UAAQ,OAAOF,IAAI,CAACb,WAApB;AACE,SAAK,UAAL;AAAiB,WAAKD,cAAL,GAAsBc,IAAI,CAACb,WAA3B;AAAwC;;AACzD,SAAK,WAAL;AAAkB,WAAKD,cAAL,GAAsBnC,kBAAtB;AAA0C;;AAC5D;AAAS,YAAM,IAAImD,SAAJ,CAAc,uDAAd,CAAN;AAHX;;AAMA,UAAQ,OAAOF,IAAI,CAACP,QAApB;AACE,SAAK,UAAL;AAAiB,WAAKd,WAAL,GAAmBqB,IAAI,CAACP,QAAxB;AAAkC;;AACnD,SAAK,WAAL;AAAkB,WAAKd,WAAL,GAAmB3B,eAAnB;AAAoC;;AACtD;AAAS,YAAM,IAAIkD,SAAJ,CAAc,oDAAd,CAAN;AAHX;;AAMA,UAAQ,OAAOF,IAAI,CAACN,YAApB;AACE,SAAK,UAAL;AAAiB,WAAKd,eAAL,GAAuBoB,IAAI,CAACN,YAA5B;AAA0C;;AAC3D,SAAK,QAAL;AAAe,WAAKd,eAAL,GAAuBnC,WAAW,CAACuD,IAAI,CAACN,YAAN,CAAlC;AAAuD;;AACtE,SAAK,WAAL;AAAkB,WAAKd,eAAL,GAAuB3B,mBAAvB;AAA4C;;AAC9D;AAAS,YAAM,IAAIiD,SAAJ,CAAc,gEAAd,CAAN;AAJX;;AAOA,UAAQ,OAAOF,IAAI,CAACL,kBAApB;AACE,SAAK,UAAL;AAAiB,WAAKd,qBAAL,GAA6BmB,IAAI,CAACL,kBAAlC;AAAsD;;AACvE,SAAK,QAAL;AAAe,WAAKd,qBAAL,GAA6BpC,WAAW,CAACuD,IAAI,CAACL,kBAAN,CAAxC;AAAmE;;AAClF,SAAK,WAAL;AAAkB,WAAKd,qBAAL,GAA6B3B,yBAA7B;AAAwD;;AAC1E;AAAS,YAAM,IAAIgD,SAAJ,CAAc,sEAAd,CAAN;AAJX;;AAOA,UAAQ,OAAOF,IAAI,CAACJ,YAApB;AACE,SAAK,UAAL;AAAiB,WAAKd,eAAL,GAAuBkB,IAAI,CAACJ,YAA5B;AAA0C;;AAC3D,SAAK,QAAL;AAAe,WAAKd,eAAL,GAAuBrC,WAAW,CAACuD,IAAI,CAACJ,YAAN,CAAlC;AAAuD;;AACtE,SAAK,WAAL;AAAkB,WAAKd,eAAL,GAAuB3B,mBAAvB;AAA4C;;AAC9D;AAAS,YAAM,IAAI+C,SAAJ,CAAc,gEAAd,CAAN;AAJX;;AAOA,UAAQ,OAAOF,IAAI,CAACH,oBAApB;AACE,SAAK,UAAL;AAAiB,WAAKd,MAAL,GAAciB,IAAI,CAACH,oBAAnB;AAAyC;;AAC1D,SAAK,QAAL;AAAe,WAAKd,MAAL,GAActC,WAAW,CAACuD,IAAI,CAACH,oBAAN,CAAzB;AAAsD;;AACrE,SAAK,WAAL;AAAkB,WAAKd,MAAL,GAAc3B,UAAd;AAA0B;;AAC5C;AAAS,YAAM,IAAI8C,SAAJ,CAAc,wEAAd,CAAN;AAJX;;AAOA,UAAQ,OAAOF,IAAI,CAACF,WAApB;AACE,SAAK,UAAL;AAAiB,WAAKd,SAAL,GAAiBgB,IAAI,CAACF,WAAtB;AAAmC;;AACpD,SAAK,QAAL;AAAe,WAAKd,SAAL,GAAiBvC,WAAW,CAACuD,IAAI,CAACF,WAAN,CAA5B;AAAgD;;AAC/D,SAAK,WAAL;AAAkB,WAAKd,SAAL,GAAiB3B,aAAjB;AAAgC;;AAClD;AAAS,YAAM,IAAI6C,SAAJ,CAAc,gEAAd,CAAN;AAJX;AAMD;;AAEDH,SAAS,CAACK,SAAV,CAAoBC,WAApB,GAAkC,UAAU1D,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AACzDwB,EAAAA,OAAO,CAAC,IAAD,EAAO1B,GAAP,EAAYC,IAAZ,EAAkB,UAAUY,GAAV,EAAewC,IAAf,EAAqB;AAC5C,QAAIxC,GAAJ,EAAS,OAAOX,EAAE,CAACW,GAAD,CAAT;AAET,QAAI8C,WAAW,GAAG,CAAlB;AAEA,QAAIC,MAAM,GAAG;AACXC,MAAAA,MAAM,EAAER,IAAI,CAACV,MADF;AAEXmB,MAAAA,GAAG,EAAET,IAAI,CAACT,GAFC;AAGXmB,MAAAA,GAAG,EAAEV,IAAI,CAACR,GAHC;AAIXmB,MAAAA,YAAY,EAAEX,IAAI,CAACN,YAJR;AAKXkB,MAAAA,WAAW,EAAEZ,IAAI,CAACb,WALP;AAMX0B,MAAAA,QAAQ,EAAEb,IAAI,CAACP,QANJ;AAOXqB,MAAAA,YAAY,EAAEd,IAAI,CAACJ,YAPR;AAQXmB,MAAAA,oBAAoB,EAAEf,IAAI,CAACH,oBARhB;AASXmB,MAAAA,WAAW,EAAEhB,IAAI,CAACF,WATP;AAUXmB,MAAAA,IAAI,EAAGjB,IAAI,CAACZ,iBAAL,IAA0BxC,IAAI,CAACP;AAV3B,KAAb;;AAaA,QAAI2D,IAAI,CAACL,kBAAT,EAA6B;AAC3BY,MAAAA,MAAM,CAACW,kBAAP,GAA4BlB,IAAI,CAACL,kBAAjC;AACD;;AAED,QAAIwB,MAAM,GAAG,KAAKlB,EAAL,CAAQkB,MAAR,CAAeZ,MAAf,CAAb;AAEAY,IAAAA,MAAM,CAACC,EAAP,CAAU,oBAAV,EAAgC,UAAUC,EAAV,EAAc;AAC5C,UAAIA,EAAE,CAACC,KAAP,EAAchB,WAAW,GAAGe,EAAE,CAACC,KAAjB;AACf,KAFD;AAIAH,IAAAA,MAAM,CAACI,IAAP,CAAY,UAAU/D,GAAV,EAAegE,MAAf,EAAuB;AACjC,UAAIhE,GAAJ,EAAS,OAAOX,EAAE,CAACW,GAAD,CAAT;AAETX,MAAAA,EAAE,CAAC,IAAD,EAAO;AACP4E,QAAAA,IAAI,EAAEnB,WADC;AAEPhB,QAAAA,MAAM,EAAEU,IAAI,CAACV,MAFN;AAGPC,QAAAA,GAAG,EAAES,IAAI,CAACT,GAHH;AAIPC,QAAAA,GAAG,EAAEQ,IAAI,CAACR,GAJH;AAKPL,QAAAA,WAAW,EAAEa,IAAI,CAACb,WALX;AAMPQ,QAAAA,kBAAkB,EAAEK,IAAI,CAACL,kBANlB;AAOPC,QAAAA,YAAY,EAAEI,IAAI,CAACJ,YAPZ;AAQPC,QAAAA,oBAAoB,EAAEG,IAAI,CAACH,oBARpB;AASPJ,QAAAA,QAAQ,EAAEO,IAAI,CAACP,QATR;AAUPiC,QAAAA,QAAQ,EAAEF,MAAM,CAACG,QAVV;AAWPC,QAAAA,IAAI,EAAEJ,MAAM,CAACK,IAXN;AAYPC,QAAAA,SAAS,EAAEN,MAAM,CAACO;AAZX,OAAP,CAAF;AAcD,KAjBD;AAkBD,GA9CM,CAAP;AA+CD,CAhDD;;AAkDAhC,SAAS,CAACK,SAAV,CAAoB4B,WAApB,GAAkC,UAAUrF,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AACzD,OAAKoD,EAAL,CAAQgC,YAAR,CAAqB;AAAEzB,IAAAA,MAAM,EAAE5D,IAAI,CAAC0C,MAAf;AAAuBmB,IAAAA,GAAG,EAAE7D,IAAI,CAAC2C;AAAjC,GAArB,EAA6D1C,EAA7D;AACD,CAFD;;AAIAqF,MAAM,CAACC,OAAP,GAAiB,UAAUnC,IAAV,EAAgB;AAC/B,SAAO,IAAID,SAAJ,CAAcC,IAAd,CAAP;AACD,CAFD;;AAIAkC,MAAM,CAACC,OAAP,CAAeC,iBAAf,GAAmCxE,eAAnC;AACAsE,MAAM,CAACC,OAAP,CAAeE,oBAAf,GAAsCtF,kBAAtC","sourcesContent":["var crypto = require('crypto')\nvar stream = require('stream')\nvar fileType = require('file-type')\nvar isSvg = require('is-svg')\nvar parallel = require('run-parallel')\n\nfunction staticValue (value) {\n  return function (req, file, cb) {\n    cb(null, value)\n  }\n}\n\nvar defaultAcl = staticValue('private')\nvar defaultContentType = staticValue('application/octet-stream')\n\nvar defaultMetadata = staticValue(null)\nvar defaultCacheControl = staticValue(null)\nvar defaultContentDisposition = staticValue(null)\nvar defaultStorageClass = staticValue('STANDARD')\nvar defaultSSE = staticValue(null)\nvar defaultSSEKMS = staticValue(null)\n\nfunction defaultKey (req, file, cb) {\n  crypto.randomBytes(16, function (err, raw) {\n    cb(err, err ? undefined : raw.toString('hex'))\n  })\n}\n\nfunction autoContentType (req, file, cb) {\n  file.stream.once('data', function (firstChunk) {\n    var type = fileType(firstChunk)\n    var mime\n\n    if (type) {\n      mime = type.mime\n    } else if (isSvg(firstChunk)) {\n      mime = 'image/svg+xml'\n    } else {\n      mime = 'application/octet-stream'\n    }\n\n    var outStream = new stream.PassThrough()\n\n    outStream.write(firstChunk)\n    file.stream.pipe(outStream)\n\n    cb(null, mime, outStream)\n  })\n}\n\nfunction collect (storage, req, file, cb) {\n  parallel([\n    storage.getBucket.bind(storage, req, file),\n    storage.getKey.bind(storage, req, file),\n    storage.getAcl.bind(storage, req, file),\n    storage.getMetadata.bind(storage, req, file),\n    storage.getCacheControl.bind(storage, req, file),\n    storage.getContentDisposition.bind(storage, req, file),\n    storage.getStorageClass.bind(storage, req, file),\n    storage.getSSE.bind(storage, req, file),\n    storage.getSSEKMS.bind(storage, req, file)\n  ], function (err, values) {\n    if (err) return cb(err)\n\n    storage.getContentType(req, file, function (err, contentType, replacementStream) {\n      if (err) return cb(err)\n\n      cb.call(storage, null, {\n        bucket: values[0],\n        key: values[1],\n        acl: values[2],\n        metadata: values[3],\n        cacheControl: values[4],\n        contentDisposition: values[5],\n        storageClass: values[6],\n        contentType: contentType,\n        replacementStream: replacementStream,\n        serverSideEncryption: values[7],\n        sseKmsKeyId: values[8]\n      })\n    })\n  })\n}\n\nfunction S3Storage (opts) {\n  switch (typeof opts.s3) {\n    case 'object': this.s3 = opts.s3; break\n    default: throw new TypeError('Expected opts.s3 to be object')\n  }\n\n  switch (typeof opts.bucket) {\n    case 'function': this.getBucket = opts.bucket; break\n    case 'string': this.getBucket = staticValue(opts.bucket); break\n    case 'undefined': throw new Error('bucket is required')\n    default: throw new TypeError('Expected opts.bucket to be undefined, string or function')\n  }\n\n  switch (typeof opts.key) {\n    case 'function': this.getKey = opts.key; break\n    case 'undefined': this.getKey = defaultKey; break\n    default: throw new TypeError('Expected opts.key to be undefined or function')\n  }\n\n  switch (typeof opts.acl) {\n    case 'function': this.getAcl = opts.acl; break\n    case 'string': this.getAcl = staticValue(opts.acl); break\n    case 'undefined': this.getAcl = defaultAcl; break\n    default: throw new TypeError('Expected opts.acl to be undefined, string or function')\n  }\n\n  switch (typeof opts.contentType) {\n    case 'function': this.getContentType = opts.contentType; break\n    case 'undefined': this.getContentType = defaultContentType; break\n    default: throw new TypeError('Expected opts.contentType to be undefined or function')\n  }\n\n  switch (typeof opts.metadata) {\n    case 'function': this.getMetadata = opts.metadata; break\n    case 'undefined': this.getMetadata = defaultMetadata; break\n    default: throw new TypeError('Expected opts.metadata to be undefined or function')\n  }\n\n  switch (typeof opts.cacheControl) {\n    case 'function': this.getCacheControl = opts.cacheControl; break\n    case 'string': this.getCacheControl = staticValue(opts.cacheControl); break\n    case 'undefined': this.getCacheControl = defaultCacheControl; break\n    default: throw new TypeError('Expected opts.cacheControl to be undefined, string or function')\n  }\n\n  switch (typeof opts.contentDisposition) {\n    case 'function': this.getContentDisposition = opts.contentDisposition; break\n    case 'string': this.getContentDisposition = staticValue(opts.contentDisposition); break\n    case 'undefined': this.getContentDisposition = defaultContentDisposition; break\n    default: throw new TypeError('Expected opts.contentDisposition to be undefined, string or function')\n  }\n\n  switch (typeof opts.storageClass) {\n    case 'function': this.getStorageClass = opts.storageClass; break\n    case 'string': this.getStorageClass = staticValue(opts.storageClass); break\n    case 'undefined': this.getStorageClass = defaultStorageClass; break\n    default: throw new TypeError('Expected opts.storageClass to be undefined, string or function')\n  }\n\n  switch (typeof opts.serverSideEncryption) {\n    case 'function': this.getSSE = opts.serverSideEncryption; break\n    case 'string': this.getSSE = staticValue(opts.serverSideEncryption); break\n    case 'undefined': this.getSSE = defaultSSE; break\n    default: throw new TypeError('Expected opts.serverSideEncryption to be undefined, string or function')\n  }\n\n  switch (typeof opts.sseKmsKeyId) {\n    case 'function': this.getSSEKMS = opts.sseKmsKeyId; break\n    case 'string': this.getSSEKMS = staticValue(opts.sseKmsKeyId); break\n    case 'undefined': this.getSSEKMS = defaultSSEKMS; break\n    default: throw new TypeError('Expected opts.sseKmsKeyId to be undefined, string, or function')\n  }\n}\n\nS3Storage.prototype._handleFile = function (req, file, cb) {\n  collect(this, req, file, function (err, opts) {\n    if (err) return cb(err)\n\n    var currentSize = 0\n\n    var params = {\n      Bucket: opts.bucket,\n      Key: opts.key,\n      ACL: opts.acl,\n      CacheControl: opts.cacheControl,\n      ContentType: opts.contentType,\n      Metadata: opts.metadata,\n      StorageClass: opts.storageClass,\n      ServerSideEncryption: opts.serverSideEncryption,\n      SSEKMSKeyId: opts.sseKmsKeyId,\n      Body: (opts.replacementStream || file.stream)\n    }\n\n    if (opts.contentDisposition) {\n      params.ContentDisposition = opts.contentDisposition\n    }\n\n    var upload = this.s3.upload(params)\n\n    upload.on('httpUploadProgress', function (ev) {\n      if (ev.total) currentSize = ev.total\n    })\n\n    upload.send(function (err, result) {\n      if (err) return cb(err)\n\n      cb(null, {\n        size: currentSize,\n        bucket: opts.bucket,\n        key: opts.key,\n        acl: opts.acl,\n        contentType: opts.contentType,\n        contentDisposition: opts.contentDisposition,\n        storageClass: opts.storageClass,\n        serverSideEncryption: opts.serverSideEncryption,\n        metadata: opts.metadata,\n        location: result.Location,\n        etag: result.ETag,\n        versionId: result.VersionId\n      })\n    })\n  })\n}\n\nS3Storage.prototype._removeFile = function (req, file, cb) {\n  this.s3.deleteObject({ Bucket: file.bucket, Key: file.key }, cb)\n}\n\nmodule.exports = function (opts) {\n  return new S3Storage(opts)\n}\n\nmodule.exports.AUTO_CONTENT_TYPE = autoContentType\nmodule.exports.DEFAULT_CONTENT_TYPE = defaultContentType\n"]},"metadata":{},"sourceType":"script"}
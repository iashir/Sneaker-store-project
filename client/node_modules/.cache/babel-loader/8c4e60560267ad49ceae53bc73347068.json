{"ast":null,"code":"import axios from \"axios\";\nimport { LOGIN_USER, REGISTER_USER, AUTH_USER, LOGOUT_USER, ADD_TO_CART_USER, GET_CART_ITEMS_USER, REMOVE_CART_ITEM_USER, ON_SUCCESS_BUY_USER } from \"./types\";\nimport { USER_SERVER } from \"../components/Config.js\";\nexport function registerUser(dataToSubmit) {\n  const request = axios.post(`${USER_SERVER}/register`, dataToSubmit).then(response => response.data);\n  return {\n    type: REGISTER_USER,\n    payload: request\n  };\n}\nexport function loginUser(dataToSubmit) {\n  const request = axios.post(`${USER_SERVER}/login`, dataToSubmit).then(response => response.data);\n  return {\n    type: LOGIN_USER,\n    payload: request\n  };\n}\nexport function auth() {\n  const request = axios.get(`${USER_SERVER}/auth`).then(response => response.data);\n  return {\n    type: AUTH_USER,\n    payload: request\n  };\n}\nexport function logoutUser() {\n  const request = axios.get(`${USER_SERVER}/logout`).then(response => response.data);\n  return {\n    type: LOGOUT_USER,\n    payload: request\n  };\n}\nexport function addToCart(_id, quantity) {\n  const request = axios.get(`${USER_SERVER}/addToCart?productId=${_id}`).then(response => response.data);\n  return {\n    type: ADD_TO_CART_USER,\n    payload: request\n  };\n}\nexport function getCartItems(cartItems, userCart) {\n  const request = axios.get(`/api/product/products_by_id?id=${cartItems}&type=array`).then(response => {\n    //Make CartDetail inside Redux Store\n    // We need to add quantity data to Product Information that come from Product Collection.\n    userCart.forEach(cartItem => {\n      response.data.forEach((productDetail, i) => {\n        if (cartItem.id === productDetail._id) {\n          response.data[i].quantity = cartItem.quantity;\n        }\n      });\n    });\n    return response.data;\n  });\n  return {\n    type: GET_CART_ITEMS_USER,\n    payload: request\n  };\n}\nexport function removeCartItem(id) {\n  const request = axios.get(`/api/users/removeFromCart?_id=${id}`).then(response => {\n    response.data.cart.forEach(item => {\n      response.data.cartDetail.forEach((k, i) => {\n        if (item.id === k._id) {\n          response.data.cartDetail[i].quantity = item.quantity;\n        }\n      });\n    });\n    return response.data;\n  });\n  return {\n    type: REMOVE_CART_ITEM_USER,\n    payload: request\n  };\n}\nexport function onSuccessBuy(data) {\n  const request = axios.post(`${USER_SERVER}/successBuy`, data).then(response => response.data);\n  return {\n    type: ON_SUCCESS_BUY_USER,\n    payload: request\n  };\n}","map":{"version":3,"sources":["/Users/iashir/Desktop/WorkProjects/Store/client/src/_actions/user_actions.js"],"names":["axios","LOGIN_USER","REGISTER_USER","AUTH_USER","LOGOUT_USER","ADD_TO_CART_USER","GET_CART_ITEMS_USER","REMOVE_CART_ITEM_USER","ON_SUCCESS_BUY_USER","USER_SERVER","registerUser","dataToSubmit","request","post","then","response","data","type","payload","loginUser","auth","get","logoutUser","addToCart","_id","quantity","getCartItems","cartItems","userCart","forEach","cartItem","productDetail","i","id","removeCartItem","cart","item","cartDetail","k","onSuccessBuy"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,UADF,EAEEC,aAFF,EAGEC,SAHF,EAIEC,WAJF,EAKEC,gBALF,EAMEC,mBANF,EAOEC,qBAPF,EAQEC,mBARF,QASO,SATP;AAUA,SAASC,WAAT,QAA4B,yBAA5B;AAEA,OAAO,SAASC,YAAT,CAAsBC,YAAtB,EAAoC;AACzC,QAAMC,OAAO,GAAGZ,KAAK,CAClBa,IADa,CACP,GAAEJ,WAAY,WADP,EACmBE,YADnB,EAEbG,IAFa,CAEPC,QAAD,IAAcA,QAAQ,CAACC,IAFf,CAAhB;AAIA,SAAO;AACLC,IAAAA,IAAI,EAAEf,aADD;AAELgB,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID;AAED,OAAO,SAASO,SAAT,CAAmBR,YAAnB,EAAiC;AACtC,QAAMC,OAAO,GAAGZ,KAAK,CAClBa,IADa,CACP,GAAEJ,WAAY,QADP,EACgBE,YADhB,EAEbG,IAFa,CAEPC,QAAD,IAAcA,QAAQ,CAACC,IAFf,CAAhB;AAIA,SAAO;AACLC,IAAAA,IAAI,EAAEhB,UADD;AAELiB,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID;AAED,OAAO,SAASQ,IAAT,GAAgB;AACrB,QAAMR,OAAO,GAAGZ,KAAK,CAClBqB,GADa,CACR,GAAEZ,WAAY,OADN,EAEbK,IAFa,CAEPC,QAAD,IAAcA,QAAQ,CAACC,IAFf,CAAhB;AAIA,SAAO;AACLC,IAAAA,IAAI,EAAEd,SADD;AAELe,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID;AAED,OAAO,SAASU,UAAT,GAAsB;AAC3B,QAAMV,OAAO,GAAGZ,KAAK,CAClBqB,GADa,CACR,GAAEZ,WAAY,SADN,EAEbK,IAFa,CAEPC,QAAD,IAAcA,QAAQ,CAACC,IAFf,CAAhB;AAIA,SAAO;AACLC,IAAAA,IAAI,EAAEb,WADD;AAELc,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID;AAED,OAAO,SAASW,SAAT,CAAmBC,GAAnB,EAAwBC,QAAxB,EAAmC;AACxC,QAAMb,OAAO,GAAGZ,KAAK,CAClBqB,GADa,CACR,GAAEZ,WAAY,wBAAuBe,GAAI,EADjC,EAEbV,IAFa,CAEPC,QAAD,IAAcA,QAAQ,CAACC,IAFf,CAAhB;AAIA,SAAO;AACLC,IAAAA,IAAI,EAAEZ,gBADD;AAELa,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID;AAED,OAAO,SAASc,YAAT,CAAsBC,SAAtB,EAAiCC,QAAjC,EAA2C;AAChD,QAAMhB,OAAO,GAAGZ,KAAK,CAClBqB,GADa,CACR,kCAAiCM,SAAU,aADnC,EAEbb,IAFa,CAEPC,QAAD,IAAc;AAClB;AACA;AAEAa,IAAAA,QAAQ,CAACC,OAAT,CAAkBC,QAAD,IAAc;AAC7Bf,MAAAA,QAAQ,CAACC,IAAT,CAAca,OAAd,CAAsB,CAACE,aAAD,EAAgBC,CAAhB,KAAsB;AAC1C,YAAIF,QAAQ,CAACG,EAAT,KAAgBF,aAAa,CAACP,GAAlC,EAAuC;AACrCT,UAAAA,QAAQ,CAACC,IAAT,CAAcgB,CAAd,EAAiBP,QAAjB,GAA4BK,QAAQ,CAACL,QAArC;AACD;AACF,OAJD;AAKD,KAND;AAQA,WAAOV,QAAQ,CAACC,IAAhB;AACD,GAfa,CAAhB;AAiBA,SAAO;AACLC,IAAAA,IAAI,EAAEX,mBADD;AAELY,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID;AAED,OAAO,SAASsB,cAAT,CAAwBD,EAAxB,EAA4B;AACjC,QAAMrB,OAAO,GAAGZ,KAAK,CAClBqB,GADa,CACR,iCAAgCY,EAAG,EAD3B,EAEbnB,IAFa,CAEPC,QAAD,IAAc;AAClBA,IAAAA,QAAQ,CAACC,IAAT,CAAcmB,IAAd,CAAmBN,OAAnB,CAA4BO,IAAD,IAAU;AACnCrB,MAAAA,QAAQ,CAACC,IAAT,CAAcqB,UAAd,CAAyBR,OAAzB,CAAiC,CAACS,CAAD,EAAIN,CAAJ,KAAU;AACzC,YAAII,IAAI,CAACH,EAAL,KAAYK,CAAC,CAACd,GAAlB,EAAuB;AACrBT,UAAAA,QAAQ,CAACC,IAAT,CAAcqB,UAAd,CAAyBL,CAAzB,EAA4BP,QAA5B,GAAuCW,IAAI,CAACX,QAA5C;AACD;AACF,OAJD;AAKD,KAND;AAOA,WAAOV,QAAQ,CAACC,IAAhB;AACD,GAXa,CAAhB;AAaA,SAAO;AACLC,IAAAA,IAAI,EAAEV,qBADD;AAELW,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID;AAED,OAAO,SAAS2B,YAAT,CAAsBvB,IAAtB,EAA4B;AACjC,QAAMJ,OAAO,GAAGZ,KAAK,CAClBa,IADa,CACP,GAAEJ,WAAY,aADP,EACqBO,IADrB,EAEbF,IAFa,CAEPC,QAAD,IAAcA,QAAQ,CAACC,IAFf,CAAhB;AAIA,SAAO;AACLC,IAAAA,IAAI,EAAET,mBADD;AAELU,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID","sourcesContent":["import axios from \"axios\";\nimport {\n  LOGIN_USER,\n  REGISTER_USER,\n  AUTH_USER,\n  LOGOUT_USER,\n  ADD_TO_CART_USER,\n  GET_CART_ITEMS_USER,\n  REMOVE_CART_ITEM_USER,\n  ON_SUCCESS_BUY_USER,\n} from \"./types\";\nimport { USER_SERVER } from \"../components/Config.js\";\n\nexport function registerUser(dataToSubmit) {\n  const request = axios\n    .post(`${USER_SERVER}/register`, dataToSubmit)\n    .then((response) => response.data);\n\n  return {\n    type: REGISTER_USER,\n    payload: request,\n  };\n}\n\nexport function loginUser(dataToSubmit) {\n  const request = axios\n    .post(`${USER_SERVER}/login`, dataToSubmit)\n    .then((response) => response.data);\n\n  return {\n    type: LOGIN_USER,\n    payload: request,\n  };\n}\n\nexport function auth() {\n  const request = axios\n    .get(`${USER_SERVER}/auth`)\n    .then((response) => response.data);\n\n  return {\n    type: AUTH_USER,\n    payload: request,\n  };\n}\n\nexport function logoutUser() {\n  const request = axios\n    .get(`${USER_SERVER}/logout`)\n    .then((response) => response.data);\n\n  return {\n    type: LOGOUT_USER,\n    payload: request,\n  };\n}\n\nexport function addToCart(_id, quantity ) {\n  const request = axios\n    .get(`${USER_SERVER}/addToCart?productId=${_id}`)\n    .then((response) => response.data);\n\n  return {\n    type: ADD_TO_CART_USER,\n    payload: request,\n  };\n}\n\nexport function getCartItems(cartItems, userCart) {\n  const request = axios\n    .get(`/api/product/products_by_id?id=${cartItems}&type=array`)\n    .then((response) => {\n      //Make CartDetail inside Redux Store\n      // We need to add quantity data to Product Information that come from Product Collection.\n\n      userCart.forEach((cartItem) => {\n        response.data.forEach((productDetail, i) => {\n          if (cartItem.id === productDetail._id) {\n            response.data[i].quantity = cartItem.quantity;\n          }\n        });\n      });\n\n      return response.data;\n    });\n\n  return {\n    type: GET_CART_ITEMS_USER,\n    payload: request,\n  };\n}\n\nexport function removeCartItem(id) {\n  const request = axios\n    .get(`/api/users/removeFromCart?_id=${id}`)\n    .then((response) => {\n      response.data.cart.forEach((item) => {\n        response.data.cartDetail.forEach((k, i) => {\n          if (item.id === k._id) {\n            response.data.cartDetail[i].quantity = item.quantity;\n          }\n        });\n      });\n      return response.data;\n    });\n\n  return {\n    type: REMOVE_CART_ITEM_USER,\n    payload: request,\n  };\n}\n\nexport function onSuccessBuy(data) {\n  const request = axios\n    .post(`${USER_SERVER}/successBuy`, data)\n    .then((response) => response.data);\n\n  return {\n    type: ON_SUCCESS_BUY_USER,\n    payload: request,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}